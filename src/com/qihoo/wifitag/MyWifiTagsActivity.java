package com.qihoo.wifitag;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.view.Display;import android.view.KeyEvent;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.WindowManager.LayoutParams;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.AdapterView.OnItemLongClickListener;import android.widget.BaseAdapter;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.GridView;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.qihoo.wifitag.util.DBUtil;import com.qihoo.wifitag.util.TagInfo;public class MyWifiTagsActivity extends SlideMenuActivity {	private final String TAG = "mywifitag";		private GridView mytagGridView = null;	private View newTagBtn = null;	private List<View> tagViews = new ArrayList<View>();	private List<TagInfo> tagInfos = null;	private BaseAdapter adapter = null;	private MyBoxCheckedListener checkedListener = new MyBoxCheckedListener();	private ImageView delete_tag = null;	private View delete_tags_bar = null;	private int selectedCount = 0;	private boolean isEditAble = false;		@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentLayout(R.layout.mytags);		initUI();		setTagClickEvent();	}		private void initUI() {		mytagGridView = (GridView) findViewById(R.id.mytags);		newTagBtn = getLayoutInflater().inflate(R.layout.tag_item_new, null);		tagViews.add(newTagBtn);		tagInfos = DBUtil.getAllTagInfo();		for (TagInfo tf : tagInfos) {			View layout = getLayoutInflater().inflate(R.layout.tag_item, null);			TextView name = (TextView) layout.findViewById(R.id.mytag_name);			name.setText(tf.getTagName());			CheckBox checkBox = (CheckBox) layout.findViewById(R.id.mytag_select);			checkBox.setOnCheckedChangeListener(checkedListener);			tagViews.add(layout);		}		adapter = new WifiTagAdapter(tagViews);		mytagGridView.setAdapter(adapter);		delete_tags_bar = findViewById(R.id.delete_tags_bar);		delete_tag = (ImageView) findViewById(R.id.delete_tags);		delete_tag.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				Iterator<View> viewIt = tagViews.iterator();				viewIt.next();				Iterator<TagInfo> infoIt = tagInfos.iterator();				while (viewIt.hasNext() && infoIt.hasNext()) {					View layout = viewIt.next();					TagInfo tf = infoIt.next();					CheckBox box = (CheckBox) layout.findViewById(R.id.mytag_select);					if (box.isChecked()) {						viewIt.remove();						infoIt.remove();						DBUtil.deleteTagFromDB(tf.getTagName());					}				}				selectedCount = 0;				isEditAble = false;			}		});	}		@Override	protected void onResume() {		// TODO Auto-generated method stub		super.onResume();			}			private void setTagClickEvent() {		mytagGridView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int index,					long arg3) {				if (index == 0) {					Intent intent = new Intent(MyWifiTagsActivity.this, CreateWifiTagActivity.class);					MyWifiTagsActivity.this.startActivity(intent);				} else {					Dialog dialog = new MyDialog(MyWifiTagsActivity.this, tagInfos.get(index-1));					dialog.show();				}			}		});				mytagGridView.setOnItemLongClickListener(new OnItemLongClickListener() {			@Override			public boolean onItemLongClick(AdapterView<?> arg0, View arg1,					int index, long arg3) {				makeToast(index + "  " + selectedCount);				if (index == 0) return false;								if (!isEditAble) {					setCheckBoxVisible();					View layout = tagViews.get(index);					CheckBox check = (CheckBox) layout.findViewById(R.id.mytag_select);					check.setChecked(true);					isEditAble = true;					return true;				}				return false;			}		});	}		private void makeToast(String msg) {		Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();	}		private void setCheckBoxVisible() {		for (View layout : tagViews) {			CheckBox check = (CheckBox) layout.findViewById(R.id.mytag_select);			if (check != null) {				check.setVisibility(View.VISIBLE);				check.setChecked(false);			}		}		delete_tags_bar.setVisibility(View.VISIBLE);	}		//重写返回事件	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 && isEditAble) {			setCheckBoxInvisibleAndunChecked();			isEditAble = false;			return true;		}		return super.onKeyDown(keyCode, event);	}		/**	 * 设置check没有被选中状态	 */	private void setCheckBoxInvisibleAndunChecked() {		for (View layout : tagViews) {			CheckBox check = (CheckBox) layout.findViewById(R.id.mytag_select);			if (check != null) {				check.setVisibility(View.INVISIBLE);				check.setChecked(false);			}		}		delete_tags_bar.setVisibility(View.INVISIBLE);	}		private class MyBoxCheckedListener implements CompoundButton.OnCheckedChangeListener {		@Override		public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {			int visibleStatus = delete_tags_bar.getVisibility();			if (isChecked) {				selectedCount++;				if (visibleStatus == View.INVISIBLE) {					delete_tags_bar.setVisibility(View.VISIBLE);				}				//buttonView.setBackgroundResource(R.drawable.mytag_checked);			} else {				selectedCount--;				if (visibleStatus == View.VISIBLE) {					delete_tags_bar.setVisibility(View.INVISIBLE);				}				//buttonView.setBackgroundResource(R.drawable.mytag_unchecked);			}		}			}	}class WifiTagAdapter extends BaseAdapter {	private List<View> tagViews = null;		public WifiTagAdapter(List<View> tagViews) {		this.tagViews = tagViews;	}		@Override	public int getCount() {		return tagViews.size();	}	@Override	public Object getItem(int index) {		return tagViews.get(index);	}	@Override	public long getItemId(int index) {		return index;	}	@Override	public View getView(int index, View arg1, ViewGroup arg2) {				return tagViews.get(index);	}}class MyDialog extends Dialog {	private TagInfo info = null;	private TextView tagName = null;	private TextView tagSSID = null;	private TextView tagCreaTime = null;	private TextView tagMode = null;		private Context context;		public MyDialog(Context context, TagInfo info) {		super(context, R.style.dialog);		this.info = info;		this.context = context;	}		private void setWindowSize() {		WindowManager m = ((Activity)context).getWindowManager(); 		Display d = m.getDefaultDisplay();		LayoutParams p = getWindow().getAttributes(); 		p.height = (int) (d.getHeight() * 0.7); 		p.width = (int) (d.getWidth() * 0.9);		getWindow().setAttributes(p);	}		@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		setContentView(R.layout.tag_dialog);				setWindowSize();				tagName = (TextView) findViewById(R.id.mytag_name);		tagSSID = (TextView) findViewById(R.id.mytag_ssid);		tagCreaTime = (TextView) findViewById(R.id.mytag_createtime);		tagMode = (TextView) findViewById(R.id.mytag_mode);				tagName.setText(info.getTagName());		tagSSID.setText(info.getSsId());		tagCreaTime.setText(info.getCreateTime());		if (info.isMode()) {			tagMode.setText("私人模式");		} else {			tagMode.setText("公开模式");		}				View view = findViewById(R.id.btn_sure);		view.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub				MyDialog.this.cancel();			}		});	}		}