package com.qihoo.wifitag.util;import java.util.ArrayList;import java.util.List;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteDatabase.CursorFactory;import android.database.sqlite.SQLiteOpenHelper;public final class DBUtil {	private static final String dbname="feiyangDB1.db";	private static MySQLiteHelper sqlHelper = null;	private static SQLiteDatabase readDB = null;	private static SQLiteDatabase writeDB = null;		private static final String KEY_ID = "_id";	private static final String KEY_TAGNAME = "tagname";	private static final String KEY_SSID = "ssid";	private static final String KEY_ENCRYTYPE = "encrytype";	private static final String KEY_PASSWORD = "password";	private static final String KEY_CREATETIME = "createtime";	private static final String KEY_MODE = "mode";		private static final String TABLE_NAME = "tag";	private static final String CREATE_TABLE = "CREATE TABLE " + TABLE_NAME + " ( " + 								KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " + 								KEY_TAGNAME + " TEXT, " + 								KEY_SSID + " TEXT, " + 								KEY_ENCRYTYPE + " INTEGER, " + 								KEY_PASSWORD + " TEXT, " + 								KEY_CREATETIME + " TEXT, " +								KEY_MODE + " INTEGER )";		private static void checkNULL() {		assert sqlHelper != null;		assert readDB != null;		assert writeDB != null;	}		public static void init(Context context, int version) {		if (sqlHelper == null) {			sqlHelper = new MySQLiteHelper(context, TABLE_NAME, null, version);			readDB = sqlHelper.getReadableDatabase();			writeDB = sqlHelper.getWritableDatabase();		}	}		public static void close() {		readDB.close();		writeDB.close();		sqlHelper.close();	}		private static class MySQLiteHelper extends SQLiteOpenHelper{		public MySQLiteHelper(Context context, String name,				CursorFactory factory, int version) {			super(context, name, factory, version);		}		@Override		public void onCreate(SQLiteDatabase db) {			db.execSQL(CREATE_TABLE);		}		@Override		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {			// TODO Auto-generated method stub			// do nothing		}	}		/**	 * 添加标签	 * @param tagname	 * @param ssid	 * @param encryType	 * @param pwd	 * @param createtime	 * @param mode 加密模式	 */	public static void addTagInfoToDB(String tagName, String ssid, 			int encryType, String pwd, String createtime, boolean mode) {		int modeValue = 0;		if (mode) modeValue = 1;				ContentValues values = new ContentValues();		values.put(KEY_TAGNAME, tagName);		values.put(KEY_SSID, ssid);		values.put(KEY_ENCRYTYPE, encryType);		values.put(KEY_PASSWORD, pwd);		values.put(KEY_CREATETIME, createtime);		values.put(KEY_MODE, modeValue);		writeDB.insert(TABLE_NAME, KEY_ID, values);	}		/**	 * 判断标签是否存在	 * @param tagName	 * @return	 */	public static boolean isTagExists(String tagName) {		Cursor cursor = readDB.query(TABLE_NAME, null, KEY_TAGNAME + "=?", new String[]{tagName}, null, null, null);		cursor.moveToFirst();		boolean result = !cursor.isAfterLast();		cursor.close();		return result;//		return false;	}		/**	 * 删除标签	 * @param tagName	 */	public static void deleteTagFromDB(String tagName) {		writeDB.delete(TABLE_NAME, KEY_TAGNAME + "=?", new String[]{tagName});	}		/**	 * 获取所有的标签	 * @return	 */	public static List<TagInfo> getAllTagInfo() {		List<TagInfo> infos = new ArrayList<TagInfo>();		Cursor cursor = readDB.query(TABLE_NAME, null, null, null, null, null, null);				int tagNameIndex = cursor.getColumnIndex(KEY_TAGNAME);		int ssIdIndex = cursor.getColumnIndex(KEY_SSID);		int encryTypeIndex = cursor.getColumnIndex(KEY_ENCRYTYPE);		int pwdIndex = cursor.getColumnIndex(KEY_PASSWORD);		int createTimeIndex = cursor.getColumnIndex(KEY_CREATETIME);		int modeIndex = cursor.getColumnIndex(KEY_MODE);				for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {			String tagName = cursor.getString(tagNameIndex);			String ssId = cursor.getString(ssIdIndex);			int encryType = cursor.getInt(encryTypeIndex);			String pwd = cursor.getString(pwdIndex);			String createTime = cursor.getString(createTimeIndex);			int modeValue = cursor.getInt(modeIndex);			boolean mode = false;			if (modeValue == 1) mode = true;						TagInfo t = new TagInfo(tagName, ssId, encryType, pwd, createTime, mode);			infos.add(t);		}				return infos;	}}